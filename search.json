[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 31, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nFirst File\n\n\n\n\n\nTesting Quarto\n\n\n\n\n\n\nJul 30, 2023\n\n\nMaleeha Zaman\n\n\n\n\n\n\n  \n\n\n\n\nThe Museum of Modern Art: A closer look at how collections have progressed in the past 150 years\n\n\n\n\n\nProject for Digital Humanities 140: Coding For Humanities (UCLA Summer 2023)\n\n\n\n\n\n\nJul 30, 2023\n\n\nMaleeha Zaman\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJul 28, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/DH140-finalproj.html",
    "href": "posts/DH140-finalproj.html",
    "title": "The Museum of Modern Art: A closer look at how collections have progressed in the past 150 years",
    "section": "",
    "text": "MoMA Pic\n\n\n\nThe Museum of Modern Art (MoMA) was established in New York City and hosts a collection of modern (produced during 1860s-1970s) and contemporary (produced by artists today) art works. Acquiring its first works in 1929, MoMA now has an evolving collection containing over 200,000 works from around the world. The collections includes an expansive range of visual expression such as painting, sculpture, printmaking, film, and many more that will be investigated in this project.\n\n\n\nMuseum of Modern Art Collection\nThis MoMA collections data was developed by the Museum itself and sourced directly form the MoMA database. It consists of an artists dataset and acquired artworks dataset.\nThe artworks dataset contains basic metadata for each work, including title, artist, date made, medium, dimensions, and date acquired by the Museum. Some of the records have incomplete information and have been noted as “not Curator Approved”.\nThe artists dataset contains 15,243 records of artists who have works in MoMA’s collection. It includes basic metadata for each artist, including name, nationality, gender, birth year, death year, Wiki QID, and Getty ULAN ID.\n\n\n\nThe MoMA collections dataset holds immense potential to uncover trends and influences on the artistic evolution during the past 150 years. Examining the metadata of the artists and art works included in the collection, we can more accurately trace the cultural, social, and historical shifts that occurred in MoMA, as well as any disparities in representation. This dataset can offer key insights into the tastes of MoMA curators by examining factors that could have contributed to their inclusion in the MoMA collections as well as identify underrepresented groups.\n\n\n\n\nHow do aspects of the artworks in the collection reflect shifts in representation of gender and nationality throughout the 20th and 21st centuries based on the years they were produced? What about shifts in sentiments (positive/negative)?\nWhat aspects (mediums, age, nationality, gender, positive/negative themes) of the artists and their works influence the museum’s curatorial decisions? Based on the date of acquisition, how do these preferences change over time?"
  },
  {
    "objectID": "posts/DH140-finalproj.html#introduction",
    "href": "posts/DH140-finalproj.html#introduction",
    "title": "The Museum of Modern Art: A closer look at how collections have progressed in the past 150 years",
    "section": "",
    "text": "MoMA Pic\n\n\n\nThe Museum of Modern Art (MoMA) was established in New York City and hosts a collection of modern (produced during 1860s-1970s) and contemporary (produced by artists today) art works. Acquiring its first works in 1929, MoMA now has an evolving collection containing over 200,000 works from around the world. The collections includes an expansive range of visual expression such as painting, sculpture, printmaking, film, and many more that will be investigated in this project.\n\n\n\nMuseum of Modern Art Collection\nThis MoMA collections data was developed by the Museum itself and sourced directly form the MoMA database. It consists of an artists dataset and acquired artworks dataset.\nThe artworks dataset contains basic metadata for each work, including title, artist, date made, medium, dimensions, and date acquired by the Museum. Some of the records have incomplete information and have been noted as “not Curator Approved”.\nThe artists dataset contains 15,243 records of artists who have works in MoMA’s collection. It includes basic metadata for each artist, including name, nationality, gender, birth year, death year, Wiki QID, and Getty ULAN ID.\n\n\n\nThe MoMA collections dataset holds immense potential to uncover trends and influences on the artistic evolution during the past 150 years. Examining the metadata of the artists and art works included in the collection, we can more accurately trace the cultural, social, and historical shifts that occurred in MoMA, as well as any disparities in representation. This dataset can offer key insights into the tastes of MoMA curators by examining factors that could have contributed to their inclusion in the MoMA collections as well as identify underrepresented groups.\n\n\n\n\nHow do aspects of the artworks in the collection reflect shifts in representation of gender and nationality throughout the 20th and 21st centuries based on the years they were produced? What about shifts in sentiments (positive/negative)?\nWhat aspects (mediums, age, nationality, gender, positive/negative themes) of the artists and their works influence the museum’s curatorial decisions? Based on the date of acquisition, how do these preferences change over time?"
  },
  {
    "objectID": "posts/DH140-finalproj.html#methods",
    "href": "posts/DH140-finalproj.html#methods",
    "title": "The Museum of Modern Art: A closer look at how collections have progressed in the past 150 years",
    "section": "Methods",
    "text": "Methods"
  },
  {
    "objectID": "posts/DH140-finalproj.html#results",
    "href": "posts/DH140-finalproj.html#results",
    "title": "The Museum of Modern Art: A closer look at how collections have progressed in the past 150 years",
    "section": "Results",
    "text": "Results\n\nExploratory Data Analysis\n\n!pip install plotly_express\nimport pandas as pd\nimport plotly_express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\nimport string\n\nimport requests\nimport nltk\n\nfrom string import punctuation\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer \nimport folium\nimport geopandas as gpd\nimport contextily as ctx\n\nRequirement already satisfied: plotly_express in /opt/conda/lib/python3.10/site-packages (0.4.1)\nRequirement already satisfied: pandas&gt;=0.20.0 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (1.5.3)\nRequirement already satisfied: plotly&gt;=4.1.0 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (5.15.0)\nRequirement already satisfied: statsmodels&gt;=0.9.0 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (0.14.0)\nRequirement already satisfied: scipy&gt;=0.18 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (1.11.1)\nRequirement already satisfied: patsy&gt;=0.5 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (0.5.3)\nRequirement already satisfied: numpy&gt;=1.11 in /opt/conda/lib/python3.10/site-packages (from plotly_express) (1.25.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /opt/conda/lib/python3.10/site-packages (from pandas&gt;=0.20.0-&gt;plotly_express) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas&gt;=0.20.0-&gt;plotly_express) (2023.3)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from patsy&gt;=0.5-&gt;plotly_express) (1.16.0)\nRequirement already satisfied: tenacity&gt;=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly&gt;=4.1.0-&gt;plotly_express) (8.2.2)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from plotly&gt;=4.1.0-&gt;plotly_express) (23.0)\n\n\n\nimport plotly.io as pio\npio.renderers.default = 'notebook'\n\n\ndfartworks = pd.read_csv('https://github.com/MuseumofModernArt/collection/raw/master/Artworks.csv')\ndfartists = pd.read_csv('https://github.com/MuseumofModernArt/collection/raw/master/Artists.csv')\n\n\ndfartworks['YearAcquired'] = pd.DatetimeIndex(dfartworks['DateAcquired']).year\n\n\ndfartists['Gender'] = dfartists['Gender'].str.lower()\n\n\ngender = dfartists['Gender']\ndfgender = gender.value_counts(dropna = False).to_frame()\ngenderplot = dfgender.plot.pie(subplots = True, figsize=(12,5), autopct='%1.2f%%', colors = ['lightblue', 'yellowgreen', 'pink', 'purple'], title = 'Gender Breakdown of MoMA Artists')\n\n\n\n\n\nmyStopWords = list(punctuation) + stopwords.words('english')\nnumWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\ndfartworks['Medium'] = dfartworks['Medium'].str.lower()\nfor c in punctuation:\n  dfartworks['Medium'] = dfartworks['Medium'].str.replace(c, ' ')\ndfartworks = dfartworks.astype({'Medium':'string'})\ndfmed = dfartworks['Medium'].dropna()\nmedwordlist = []\nfor i in dfmed:\n    for w in i.split():\n        if w not in myStopWords and w not in numWords and (not w.isnumeric()):\n            medwordlist.append(PorterStemmer().stem(w))\n\ndfmed = pd.DataFrame(nltk.FreqDist(medwordlist).most_common(20), columns= ['Words', 'Frequency']).sort_values('Frequency')\nmedplot = plt.barh(dfmed['Words'], dfmed['Frequency'], color='lightcoral')\n\n/tmp/ipykernel_404/3233069019.py:5: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n  dfartworks['Medium'] = dfartworks['Medium'].str.replace(c, ' ')\n\n\n\n\n\n\nartistdist = dfartworks['Artist']\nartistdistdf = artistdist.value_counts().to_frame()\nartistdistdf.head(20).sort_values('Artist').plot.barh()\n\n&lt;Axes: &gt;\n\n\n\n\n\n\ndates = []\ndfartworks = dfartworks.astype({'Date':'string'})\nfor c in punctuation:\n  dfartworks['Date'] = dfartworks['Date'].str.replace(c, ' ')\ndfartworks['Date'] = dfartworks['Date'].str.replace('s', ' ')\ndfartworks['Date'] = dfartworks['Date'].str.replace('–', ' ')\ndfartworks['Date'] = dfartworks['Date'].str.lower()\n\nfor i in range(len(dfartworks)):\n   if (not pd.isna(dfartworks['Date'][i])):\n      for w in dfartworks['Date'][i].split():\n        if (not pd.isna(w)) and w.isnumeric() and len(w) == 4:\n          dfartworks['Date'][i] = w\nindex = 0\nfor w in dfartworks['Date']:\n   if (not pd.isna(w)) and w.isnumeric() and len(w) == 4:\n          dates.append(int(w))\ndates.sort()\ntimeseries = np.unique(dates, return_counts=True)\nplt.plot(timeseries[0], timeseries[1])\n\n/tmp/ipykernel_404/2118156294.py:4: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n  dfartworks['Date'] = dfartworks['Date'].str.replace(c, ' ')\n\n\n\n\n\n\ndfworks = dfartworks.copy()\nnotyears = []\ndfworks['Date'].dropna(inplace = True)\nfor w in dfworks['Date']:\n    if (not pd.isna(w)) and not w.isnumeric() and len(w) != 4 and w not in notyears:\n        notyears.append(w)\nfor i in notyears:\n    dfworks = dfworks[dfworks['Date'] != i]\ndfworks = dfworks[dfworks['Date'] != \"n d \"]\n\n\n\nFocused Analysis\n\ndfdept = dfartworks[['YearAcquired', 'Department']].copy()\ndfdept = dfdept.dropna()\ndfdept = dfdept.astype({'YearAcquired':'int64'})\n\n\ndfdeptyear = pd.DataFrame(dfdept.groupby(by = 'YearAcquired', as_index = False, observed = True)['Department'].value_counts())\ndfdeptyear.sort_values('YearAcquired', inplace  = True)\ndfdeptyear = dfdeptyear.sort_values(['YearAcquired'])\ndfdeptyear.reset_index(inplace = True, drop = True)\n\n\nfig = px.bar(dfdeptyear, \n             x= 'Department', \n             y= 'count', \n             animation_frame = 'YearAcquired', animation_group=\"Department\",\n             width=1000, height=600, \n             title = 'Acquisition of Artworks Over Time (by Department)')\nfig.update_layout(xaxis = {\"categoryorder\":\"total ascending\"})\nfig.show()\n\n\n                                                \n\n\nDATA VIZ 1: Plot to categorize mediums according to the words included for each artwork, and plot the frequencies of the artworks (divided into different lines according to each medium) over time\n\ndfmedyear = dfartworks.filter(['Medium','DateAcquired'])\ndfmedyear = dfmedyear.dropna()\ndfmedyear.reset_index(inplace = True, drop = True)\nmedwordstr = \"\"\nfor i in range(len(dfmedyear)):\n    if (not pd.isna(dfmedyear['Medium'][i])):\n        for w in dfmedyear['Medium'][i].split():\n            if w not in myStopWords and w not in numWords:\n                medwordstr += \" \" + PorterStemmer().stem(w)\n    dfmedyear['Medium'][i] = medwordstr\n    medwordstr = \"\"\n\n\ndfmed = pd.DataFrame(nltk.FreqDist(medwordlist).most_common(5), columns= ['Words', 'Frequency']).sort_values('Frequency')\nfor i in dfmed['Words']:\n    dfmedyear[i] = dfmedyear['Medium'].str.count(i)\ndfmedyear['YearAcquired'] = pd.DatetimeIndex(dfmedyear['DateAcquired']).year\n\n\nmedyrplot = dfmedyear.groupby('YearAcquired').sum().plot(kind = 'area', figsize = (12,6))\nmedyrplot.set_xlabel('Year Acquired')\nmedyrplot.set_title('Top 5 Mediums in Artworks Acquired Over Time')\n\n/tmp/ipykernel_404/3647308248.py:1: FutureWarning:\n\nThe default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n\n\n\nText(0.5, 1.0, 'Top 5 Mediums in Artworks Acquired Over Time')\n\n\n\n\n\nDATA VIZ 2: Sentiment analysis on “Title” variable of artworks (using Vader). Plot negative and positive composite scores over time to identify if MoMA curators have fluctuated between positive and negative themes\n\ndfartworks['Title'] = dfartworks['Title'].str.lower()\ndfartworks = dfartworks.astype({'Title':'string'})\n\ndftitle = dfartworks[['Title', 'Date']].dropna()\ndftitle['Date'].dropna(inplace = True)\ndftitle['Title'].dropna(inplace = True)\nnotyears = []\nfor w in dftitle['Date']:\n    if (not pd.isna(w)) and not w.isnumeric() and len(w) != 4 and w not in notyears:\n        notyears.append(w)\nfor i in notyears:\n    dftitle = dftitle[dftitle['Date'] != i]\ndftitle = dftitle[dftitle['Date'] != \"n d \"]\ndftitle.sort_values('Date', inplace = True)\ndftitle.reset_index(inplace = True, drop = True)\n\n\nsia = vader.SentimentIntensityAnalyzer()\ndftitle['Title'] = ' ' + dftitle['Title']\ndfsentitime = pd.DataFrame(dftitle.groupby('Date')['Title'].sum())\ndfsentitime\nscorelist = []\nfor title in dfsentitime['Title']:\n        sentiscore = 0\n        for word in word_tokenize(title.lower()):\n            if word not in myStopWords:\n                sentiscore += sia.polarity_scores(word)['compound']\n        scorelist.append(sentiscore)\ndfsentitime['Sentiscore'] = scorelist\ndfsentitime.reset_index(inplace = True)\n\n\ndfsentitime = dfsentitime.astype({'Date':'int'})\n\n\nsentiplot = plt.bar(dfsentitime['Date'], dfsentitime['Sentiscore'])\nfor s in range(len(scorelist)):\n    if scorelist[s] &lt;= -150:\n        sentiplot[s].set_color('firebrick')\n    elif scorelist[s] &gt; -150 and scorelist[s] &lt;= -100:\n        sentiplot[s].set_color('brown')\n    elif scorelist[s] &gt; -100 and scorelist[s] &lt;= -50:\n        sentiplot[s].set_color('indianred')\n    elif scorelist[s] &gt; -50 and scorelist[s] &lt;= 0:\n        sentiplot[s].set_color('lightcoral')\n    elif scorelist[s] &gt; 0 and scorelist[s] &lt; 50:\n        sentiplot[s].set_color('lightblue')\n    elif scorelist[s] &gt;= 50 and scorelist[s] &lt; 100:\n        sentiplot[s].set_color('paleturquoise')\n    elif scorelist[s] &gt;= 100 and scorelist[s] &lt; 150:\n        sentiplot[s].set_color('turquoise')\n    elif scorelist[s] &gt;= 150:\n        sentiplot[s].set_color('darkturquoise')\nplt.suptitle('Compound Sentiment Scores Per Year (Production)')\nplt.ylabel('Sentiment Score')\nplt.xlabel('Year Produced')\nplt.xlim(1890, 2023)\nplt.figure(figsize = (12,6))\nplt.show()\n\n\n\n\n&lt;Figure size 1200x600 with 0 Axes&gt;\n\n\n\ndfsentaq = dfartworks[['Title', 'DateAcquired']].copy()\ndfsentaq = dfsentaq.dropna()\ndfsentaq['Date'] = pd.DatetimeIndex(dfsentaq['DateAcquired']).year\nsia = vader.SentimentIntensityAnalyzer()\ndfsentaq['Title'] = ' ' + dfsentaq['Title']\ndfsentitime = pd.DataFrame(dfsentaq.groupby('Date')['Title'].sum())\ndfsentitime\nscorelist = []\nfor title in dfsentitime['Title']:\n        sentiscore = 0\n        for word in word_tokenize(title.lower()):\n            if word not in myStopWords:\n                sentiscore += sia.polarity_scores(word)['compound']\n        scorelist.append(sentiscore)\ndfsentitime['Sentiscore'] = scorelist\ndfsentitime.reset_index(inplace = True)\n\n\nsentiplot = plt.bar(dfsentitime['Date'], dfsentitime['Sentiscore'])\nfor s in range(len(scorelist)):\n    if scorelist[s] &lt;= -150:\n        sentiplot[s].set_color('firebrick')\n    elif scorelist[s] &gt; -150 and scorelist[s] &lt;= -100:\n        sentiplot[s].set_color('brown')\n    elif scorelist[s] &gt; -100 and scorelist[s] &lt;= -50:\n        sentiplot[s].set_color('indianred')\n    elif scorelist[s] &gt; -50 and scorelist[s] &lt;= 0:\n        sentiplot[s].set_color('lightcoral')\n    elif scorelist[s] &gt; 0 and scorelist[s] &lt; 50:\n        sentiplot[s].set_color('lightblue')\n    elif scorelist[s] &gt;= 50 and scorelist[s] &lt; 100:\n        sentiplot[s].set_color('paleturquoise')\n    elif scorelist[s] &gt;= 100 and scorelist[s] &lt; 150:\n        sentiplot[s].set_color('turquoise')\n    elif scorelist[s] &gt;= 150:\n        sentiplot[s].set_color('darkturquoise')\nplt.suptitle('Compound Sentiment Scores Per Year (Acquisitions)')\nplt.ylabel('Sentiment Score')\nplt.xlabel('Year Acquired')\nplt.xlim(1929, 2023)\nplt.figure(figsize = (12,6))\nplt.show()\n\n\n\n\n&lt;Figure size 1200x600 with 0 Axes&gt;\n\n\nDATA VIZ 3: Categorize nationalities into more broader regions (by continent/continental regions) and plot histograms/or a line plot for each region to identify groups that have come to be more represented/underrepresented\n\ndfnat = pd.DataFrame(dfartists['Nationality'].dropna().value_counts())\ndfnat.reset_index(inplace = True)\n\n\ndfnat.rename(columns={'index':'nationality','Nationality':'frequency'}, inplace=True)\n\n\ndfcountries = pd.read_csv('https://github.com/knowitall/chunkedextractor/raw/master/src/main/resources/edu/knowitall/chunkedextractor/demonyms.csv')\ndfcountries.columns = ['nationality', 'country']\ncountrylist = []\nfor nat in dfnat['nationality'].values:\n    foundnat = False\n    for c in dfcountries['nationality'].values:\n        if nat == 'American':\n            countrylist.append('United States of America')\n            foundnat = True\n            break\n        natlist = c.replace(\" or \", \",\")\n        for w in natlist.split(','):\n            if w.strip() == nat:\n                countrylist.append(dfcountries.loc[dfcountries['nationality'] == c]['country'].values[0])\n                foundnat = True\n                break\n        if foundnat:\n            break\n    if foundnat == False:\n        if nat == 'Korean':\n            countrylist.append('Korea')\n        else:  \n            countrylist.append('None')\ndfnat['country'] = countrylist\ndfnat = dfnat.astype({'nationality':'string'})\ndfnat = dfnat.astype({'country':'string'})\n\n\ndfnat['log(freq)'] = np.log(dfnat['frequency'])\nm = folium.Map()\ncountry_geo = f\"https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json\"\nfolium.Choropleth(\n    geo_data=country_geo,\n    data=dfnat,\n    columns=[\"country\", \"log(freq)\"],\n    legend_name=\"Artists per Country (normalized with log)\",\n    key_on=\"feature.properties.name\",\n    nan_fill_opacity= 0,\n    fill_color=\"YlGn\",\n    highlight = True\n).add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nDATA VIZ 4: Plot frequencies of female/male artists over time (non-binary artists are excluded as there is less than 1% of them represented in this dataset)\n\ndfgender_year = dfartists[['Gender', 'BeginDate', 'EndDate']].dropna()\ndfgender_year = dfgender_year[dfgender_year['EndDate'] != 0]\ndfgender_year = dfgender_year[dfgender_year['BeginDate'] != 0]\ndfgender_year['Age'] = dfgender_year.apply(lambda row: row.EndDate - row.BeginDate, axis=1)\n\n\nA = dfgender_year.loc[dfgender_year['Gender'] == 'male', 'Age']\nB = dfgender_year.loc[dfgender_year['Gender'] == 'female', 'Age']\nfig, axes = plt.subplots(ncols=2)\naxes[1].hist(A, label='A', color ='powderblue')\naxes[1].set(title='Male Artists')\naxes[0].hist(B, label='B', color = 'lightpink')\naxes[0].set(title='Female Artists')\nfig.subplots_adjust(wspace= .5)\nfig.suptitle('Age Distribution by Gender', fontweight='semibold', fontsize = 15)\nplt.show()\n\n\n\n\n\n#dfgw = dfworks[['Gender', 'Date']].dropna()\ndfgw = dfartworks[['Gender', 'DateAcquired']].dropna()\ndfgw['Date'] = pd.DatetimeIndex(dfgw['DateAcquired']).year\n\ndfgw = dfgw.astype({'Gender':'string'})\ndfgw = dfgw.astype({'Date':'int'})\nfor i in ['(', ')']: dfgw['Gender'] = dfgw['Gender'].str.replace(i, '')\ndfgw['Gender'] = dfgw['Gender'].str.lower()\n\n/tmp/ipykernel_404/3682067671.py:7: FutureWarning:\n\nThe default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n\n\n\n\nmultartists = dfgw.copy()\nmultartists['Gender'] = multartists['Gender'].str.strip()\nmultartists = multartists[multartists['Gender'] != '']\n\n\nmultartists['male count'] = multartists['Gender'].str.count('male')\nmultartists['female count'] = multartists['Gender'].str.count('female')\nf = pd.DataFrame(multartists.groupby('Date')['female count'].sum())\nf.reset_index(inplace = True)\nm = pd.DataFrame(multartists.groupby('Date')['male count'].sum())\nm.reset_index(inplace = True)\n\n\nmultartists2 = multartists.copy()\nmultartists2 = multartists2[multartists2['Gender'] != 'male']\nmultartists2 = multartists2[multartists2['Gender'] != 'female']\nmultartists2['male count'] = multartists2['Gender'].str.count('male')\nmultartists2['female count'] = multartists2['Gender'].str.count('female')\nf2 = pd.DataFrame(multartists2.groupby('Date')['female count'].sum())\nf2.reset_index(inplace = True)\nm2 = pd.DataFrame(multartists2.groupby('Date')['male count'].sum())\nm2.reset_index(inplace = True)\n\n\nfig, ax = plt.subplots(ncols = 2, figsize =(18,6))\nax[0].plot(m['Date'], m['male count'], color = 'cadetblue', linewidth = 2.5)\nax[0].plot(f['Date'], f['female count'], color = 'indianred', linewidth = 2.5)\nax[1].plot(m2['Date'], m2['male count'], color = 'cadetblue', linewidth = 2.5)\nax[1].plot(f2['Date'], f2['female count'], color = 'indianred', linewidth = 2.5)\nax[0].set(title = 'Including Solo Artworks')\nax[1].set(title = 'Excluding Solo Artworks')\nfig.subplots_adjust(wspace= .4)\nfig.suptitle('Distribution of Artworks Grouped by Gender Over Time', fontweight='semibold', fontsize = 16)\nfig.supxlabel('Year Acquired', fontsize = 16)\nplt.figlegend(['Male', 'Female'], loc = 'center')\n\n&lt;matplotlib.legend.Legend at 0x7fd1069f3550&gt;\n\n\n\n\n\n\ndfgw = dfworks[['Gender', 'Date']].dropna()\ndfgw = dfgw.astype({'Gender':'string'})\ndfgw = dfgw.astype({'Date':'int'})\nfor i in ['(', ')']: dfgw['Gender'] = dfgw['Gender'].str.replace(i, '')\ndfgw['Gender'] = dfgw['Gender'].str.lower()\nmultartists = dfgw.copy()\nmultartists['Gender'] = multartists['Gender'].str.strip()\nmultartists = multartists[multartists['Gender'] != '']\nmultartists['male count'] = multartists['Gender'].str.count('male')\nmultartists['female count'] = multartists['Gender'].str.count('female')\nf = pd.DataFrame(multartists.groupby('Date')['female count'].sum())\nf.reset_index(inplace = True)\nm = pd.DataFrame(multartists.groupby('Date')['male count'].sum())\nm.reset_index(inplace = True)\nmultartists2 = multartists.copy()\nmultartists2 = multartists2[multartists2['Gender'] != 'male']\nmultartists2 = multartists2[multartists2['Gender'] != 'female']\nmultartists2['male count'] = multartists2['Gender'].str.count('male')\nmultartists2['female count'] = multartists2['Gender'].str.count('female')\nf2 = pd.DataFrame(multartists2.groupby('Date')['female count'].sum())\nf2.reset_index(inplace = True)\nm2 = pd.DataFrame(multartists2.groupby('Date')['male count'].sum())\nm2.reset_index(inplace = True)\n\n/tmp/ipykernel_404/1827326518.py:4: FutureWarning:\n\nThe default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n\n\n\n\nfig, ax = plt.subplots(ncols = 2, figsize =(18,6))\nax[0].plot(m['Date'], m['male count'], color = 'cadetblue', linewidth = 2.5)\nax[0].plot(f['Date'], f['female count'], color = 'indianred', linewidth = 2.5)\nax[1].plot(m2['Date'], m2['male count'], color = 'cadetblue', linewidth = 2.5)\nax[1].plot(f2['Date'], f2['female count'], color = 'indianred', linewidth = 2.5)\nax[0].set(title = 'Including Solo Artworks')\nax[1].set(title = 'Excluding Solo Artworks')\nfig.subplots_adjust(wspace= .4)\nfig.suptitle('Distribution of Artworks Grouped by Gender Over Time', fontweight='semibold', fontsize = 16)\nfig.supxlabel('Year Produced', fontsize = 16)\nplt.figlegend(['Male', 'Female'], loc = 'center')\n\n&lt;matplotlib.legend.Legend at 0x7fd1083503a0&gt;"
  },
  {
    "objectID": "posts/DH140-finalproj.html#discussion",
    "href": "posts/DH140-finalproj.html#discussion",
    "title": "The Museum of Modern Art: A closer look at how collections have progressed in the past 150 years",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]